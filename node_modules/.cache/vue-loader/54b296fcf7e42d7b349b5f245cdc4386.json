{"remainingRequest":"E:\\article_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\article_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\article_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\article_vue\\src\\components\\article\\commend.vue?vue&type=template&id=3d941956&","dependencies":[{"path":"E:\\article_vue\\src\\components\\article\\commend.vue","mtime":1618988915655},{"path":"E:\\article_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\article_vue\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\article_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\article_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}